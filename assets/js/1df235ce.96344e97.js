"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[3600],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||r;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2582:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={},i="Confidential Hello World",l={unversionedId:"dapp/cipher/confidential-smart-contract",id:"dapp/cipher/confidential-smart-contract",title:"Confidential Hello World",description:"In this chapter we are going to see how to:",source:"@site/docs/dapp/cipher/confidential-smart-contract.md",sourceDirName:"dapp/cipher",slug:"/dapp/cipher/confidential-smart-contract",permalink:"/dapp/cipher/confidential-smart-contract",draft:!1,editUrl:"https://github.com/oasisprotocol/oasis-sdk/edit/main/docs/contract/confidential-smart-contract.md",tags:[],version:"current",lastUpdatedAt:1665135874,formattedLastUpdatedAt:"Oct 7, 2022",frontMatter:{},sidebar:"developers",previous:{title:"Hello World",permalink:"/dapp/cipher/hello-world"}},s={},c=[{value:"Confidential cell",id:"confidential-cell",level:2},{value:"Confidential Instantiation and Calling",id:"confidential-instantiation-and-calling",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"confidential-hello-world"},"Confidential Hello World"),(0,o.kt)("p",null,"In this chapter we are going to see how to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"write a smart contract which stores and loads data to and from a\nconfidential store and"),(0,o.kt)("li",{parentName:"ol"},"instantiate and call the smart contract without revealing the call arguments.")),(0,o.kt)("h2",{id:"confidential-cell"},"Confidential cell"),(0,o.kt)("p",null,"In the ",(0,o.kt)("a",{parentName:"p",href:"/dapp/cipher/hello-world"},"hello world")," example we used\n",(0,o.kt)("a",{parentName:"p",href:"https://api.docs.oasis.io/oasis-sdk/oasis_contract_sdk_storage/cell/struct.PublicCell.html"},(0,o.kt)("inlineCode",{parentName:"a"},"PublicCell<T>"))," to access the key-value store\nof that contract instance. In this case the value was stored unencrypted on the\nblockchain associated with the hash of the key we provided to the constructor\n(e.g., the ",(0,o.kt)("inlineCode",{parentName:"p"},"counter")," in ",(0,o.kt)("inlineCode",{parentName:"p"},'PublicCell::new(b"counter")'),")."),(0,o.kt)("p",null,"Cipher supports another primitive ",(0,o.kt)("a",{parentName:"p",href:"https://api.docs.oasis.io/oasis-sdk/oasis_contract_sdk_storage/cell/struct.ConfidentialCell.html"},(0,o.kt)("inlineCode",{parentName:"a"},"ConfidentialCell<T>")),"\nwhich enables you to store and load data confidentially assured by\nhardware-level encryption. In addition, the value is encrypted along with a\nnonce so that it appears different each time to the blockchain observer, even\nif the decrypted value remains equal. Namely, the nonce is generated from:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the round number,"),(0,o.kt)("li",{parentName:"ul"},"the number of the sub-call during current smart contract execution,"),(0,o.kt)("li",{parentName:"ul"},"the number of confidential storage accesses from smart contracts in the\ncurrent block.")),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"The location of the confidential cell inside the contract state is\n",(0,o.kt)("strong",{parentName:"p"},"still based on the initialization key passed to the constructor"),".\nConsequently, if you declare a number of confidential cells and write to the\nsame one on each call, the blockchain observers will notice that the same\ncell is being changed every time.")),(0,o.kt)("p",null,"To call the confidential cell getter and setter, you will need to provide the\ninstance of the ",(0,o.kt)("em",{parentName:"p"},"confidential store"),". The store is obtained by calling\n",(0,o.kt)("inlineCode",{parentName:"p"},"confidential_store()")," on the contract's ",(0,o.kt)("em",{parentName:"p"},"context")," object. If, for example, the\nnode operator will try to execute your code in a non-confidential environment,\nthey would not obtain the keys required to perform decryption so the operation\nwould fail."),(0,o.kt)("p",null,"Now, let's look at how a confidential version of the hello world smart contract\nwould look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/lib.rs"',title:'"src/lib.rs"'},'//! A confidential hello world smart contract.\nextern crate alloc;\n\nuse oasis_contract_sdk as sdk;\nuse oasis_contract_sdk_storage::cell::ConfidentialCell;\n\n/// All possible errors that can be returned by the contract.\n///\n/// Each error is a triplet of (module, code, message) which allows it to be both easily\n/// human readable and also identifyable programmatically.\n#[derive(Debug, thiserror::Error, sdk::Error)]\npub enum Error {\n    #[error("bad request")]\n    #[sdk_error(code = 1)]\n    BadRequest,\n}\n\n/// All possible requests that the contract can handle.\n///\n/// This includes both calls and queries.\n#[derive(Clone, Debug, cbor::Encode, cbor::Decode)]\npub enum Request {\n    #[cbor(rename = "instantiate")]\n    Instantiate { initial_counter: u64 },\n\n    #[cbor(rename = "say_hello")]\n    SayHello { who: String },\n}\n\n/// All possible responses that the contract can return.\n///\n/// This includes both calls and queries.\n#[derive(Clone, Debug, Eq, PartialEq, cbor::Encode, cbor::Decode)]\npub enum Response {\n    #[cbor(rename = "hello")]\n    Hello { greeting: String },\n\n    #[cbor(rename = "empty")]\n    Empty,\n}\n\n/// The contract type.\npub struct HelloWorld;\n\n/// Storage cell for the counter.\nconst COUNTER: ConfidentialCell<u64> = ConfidentialCell::new(b"counter");\n\nimpl HelloWorld {\n    /// Increment the counter and return the previous value.\n    fn increment_counter<C: sdk::Context>(ctx: &mut C) -> u64 {\n        let counter = COUNTER.get(ctx.confidential_store()).unwrap_or_default();\n        COUNTER.set(ctx.confidential_store(), counter + 1);\n\n        counter\n    }\n}\n\n// Implementation of the sdk::Contract trait is required in order for the type to be a contract.\nimpl sdk::Contract for HelloWorld {\n    type Request = Request;\n    type Response = Response;\n    type Error = Error;\n\n    fn instantiate<C: sdk::Context>(ctx: &mut C, request: Request) -> Result<(), Error> {\n        // This method is called during the contracts.Instantiate call when the contract is first\n        // instantiated. It can be used to initialize the contract state.\n        match request {\n            // We require the caller to always pass the Instantiate request.\n            Request::Instantiate { initial_counter } => {\n                // Initialize counter to specified value.\n                COUNTER.set(ctx.confidential_store(), initial_counter);\n\n                Ok(())\n            }\n            _ => Err(Error::BadRequest),\n        }\n    }\n\n    fn call<C: sdk::Context>(ctx: &mut C, request: Request) -> Result<Response, Error> {\n        // This method is called for each contracts.Call call. It is supposed to handle the request\n        // and return a response.\n        match request {\n            Request::SayHello { who } => {\n                // Increment the counter and retrieve the previous value.\n                let counter = Self::increment_counter(ctx);\n\n                // Return the greeting as a response.\n                Ok(Response::Hello {\n                    greeting: format!("hello {} ({})", who, counter),\n                })\n            }\n            _ => Err(Error::BadRequest),\n        }\n    }\n\n    fn query<C: sdk::Context>(_ctx: &mut C, _request: Request) -> Result<Response, Error> {\n        // This method is called for each contracts.Query query. It is supposed to handle the\n        // request and return a response.\n        Err(Error::BadRequest)\n    }\n}\n\n// Create the required Wasm exports required for the contract to be runnable.\nsdk::create_contract!(HelloWorld);\n\n// We define some simple contract tests below.\n#[cfg(test)]\nmod test {\n    use oasis_contract_sdk::{testing::MockContext, types::ExecutionContext, Contract};\n\n    use super::*;\n\n    #[test]\n    fn test_hello() {\n        // Create a mock execution context with default values.\n        let mut ctx: MockContext = ExecutionContext::default().into();\n\n        // Instantiate the contract.\n        HelloWorld::instantiate(\n            &mut ctx,\n            Request::Instantiate {\n                initial_counter: 11,\n            },\n        )\n        .expect("instantiation should work");\n\n        // Dispatch the SayHello message.\n        let rsp = HelloWorld::call(\n            &mut ctx,\n            Request::SayHello {\n                who: "unit test".to_string(),\n            },\n        )\n        .expect("SayHello call should work");\n\n        // Make sure the greeting is correct.\n        assert_eq!(\n            rsp,\n            Response::Hello {\n                greeting: "hello unit test (11)".to_string()\n            }\n        );\n\n        // Dispatch another SayHello message.\n        let rsp = HelloWorld::call(\n            &mut ctx,\n            Request::SayHello {\n                who: "second call".to_string(),\n            },\n        )\n        .expect("SayHello call should work");\n\n        // Make sure the greeting is correct.\n        assert_eq!(\n            rsp,\n            Response::Hello {\n                greeting: "hello second call (12)".to_string()\n            }\n        );\n    }\n}\n')),(0,o.kt)("p",null,"The contract is built the same way as its non-confidential counterpart:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cargo build --target wasm32-unknown-unknown --release\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The blockchain store containing all compiled contracts is public. This means\nthat anyone will be able to decompile your smart contract and see how it\nworks. ",(0,o.kt)("strong",{parentName:"p"},"Do not put any sensitive data inside the smart contract code!"))),(0,o.kt)("p",null,"Since the smart contracts store is public, uploading the Wasm code is\nthe same as for the non-confidential ones:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"oasis contracts upload hello_world.wasm\n")),(0,o.kt)("h2",{id:"confidential-instantiation-and-calling"},"Confidential Instantiation and Calling"),(0,o.kt)("p",null,"To generate a confidential transaction, the ",(0,o.kt)("inlineCode",{parentName:"p"},"oasis contracts")," subcommand\naccepts an ",(0,o.kt)("inlineCode",{parentName:"p"},"--encrypted")," flag. Confidential transactions have encrypted\ncontract address, function name, parameters and the amounts and types of tokens\nsent. ",(0,o.kt)("strong",{parentName:"p"},"However, the ",(0,o.kt)("em",{parentName:"strong"},"authorization information")," which contains information on\nthe signer is public!")," Namely, it contains the public key of your\naccount or a list of expected multisig keys together with the gas limit and\nthe amount of fee to be paid for processing the transaction."),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"While the transaction itself is confidential, the effects of a smart contract\nexecution may reveal some information. For example, the account balances are\npublic. If the effect is, say, subtraction of 10 tokens from the signer's\naccount, this most probably implies that they have been transferred as part of\nthis transaction.")),(0,o.kt)("p",null,"Before we instantiate the contract we need to consider the gas usage of our\nconfidential smart contract. Since the execution of the smart contract is\ndependent on the (encrypted) smart contract state, the gas limit cannot be\ncomputed automatically. Currently, the gas limit for confidential transactions\nis tailored towards simple transaction execution (e.g. no gas is reserved for\naccessing the contract state). For more expensive transactions, we\nneed to explicitly pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"--gas-limit")," parameter and ",(0,o.kt)("em",{parentName:"p"},"guess")," the sufficient\nvalue for now or we will get the ",(0,o.kt)("inlineCode",{parentName:"p"},"out of gas")," error. For example, to\ninstantiate our smart contract above with a single write to the contract state,\nwe need to raise the gas limit to ",(0,o.kt)("inlineCode",{parentName:"p"},"60000"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"oasis contracts instantiate CODEID '{instantiate: {initial_counter: 42}}' --encrypted --gas-limit 60000\n")),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"out of gas")," error can ",(0,o.kt)("strong",{parentName:"p"},"potentially reveal the (confidential) state of the\nsmart contract"),"! If your smart contract contains a branch which depends on the\nvalue stored in the contract state, an attack similar to the ",(0,o.kt)("strong",{parentName:"p"},"timing attack"),"\nknown from the design of cryptographic algorithms can succeed. To overcome this,\nyour code should ",(0,o.kt)("strong",{parentName:"p"},"never contain branches depending on secret smart contract\nstate"),"."),(0,o.kt)("p",{parentName:"admonition"},"A similar gas limit attack could reveal the ",(0,o.kt)("strong",{parentName:"p"},"client's transaction parameters"),".\nFor example, if calling function ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," costs ",(0,o.kt)("inlineCode",{parentName:"p"},"50,000")," gas units and function ",(0,o.kt)("inlineCode",{parentName:"p"},"B"),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"300,000")," gas units, the attacker could imply which function call was performed\nbased on the transaction's gas limit, which is public. To mitigate this attack,\nthe client should always use the maximum gas cost among all contract function\ncalls - in this case ",(0,o.kt)("inlineCode",{parentName:"p"},"300,000"),".")),(0,o.kt)("p",null,"Finally, we make a confidential call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"oasis contracts call INSTANCEID '{say_hello: {who: \"me\"}}' --encrypted --gas-limit 60000\n")),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Regardless of the confidential storage used in the smart contract, any ",(0,o.kt)("a",{parentName:"p",href:"https://api.docs.oasis.io/oasis-sdk/oasis_contract_sdk/context/trait.Context.html#tymethod.emit_event"},"emitted\nevent")," will be public.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can view and download a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-sdk/tree/main/examples/contract-sdk/c10l-hello-world"},"complete example")," from the Oasis SDK repository.")))}p.isMDXComponent=!0}}]);