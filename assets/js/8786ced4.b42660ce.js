"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[7487],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>u});var n=a(7294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var p=n.createContext({}),d=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},m=function(t){var e=d(t.components);return n.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,p=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),k=d(a),u=l,N=k["".concat(p,".").concat(u)]||k[u]||s[u]||r;return a?n.createElement(N,i(i({ref:e},m),{},{components:a})):n.createElement(N,i({ref:e},m))}));function u(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,i=new Array(r);i[0]=k;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:l,i[1]=o;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},8341:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=a(7462),l=(a(7294),a(3905));const r={},i="ADR 0014: Signing Runtime Transactions with Hardware Wallet",o={unversionedId:"adrs/0014-runtime-signing-tx-with-hardware-wallet",id:"adrs/0014-runtime-signing-tx-with-hardware-wallet",title:"ADR 0014: Signing Runtime Transactions with Hardware Wallet",description:"Component",source:"@site/docs/adrs/0014-runtime-signing-tx-with-hardware-wallet.md",sourceDirName:"adrs",slug:"/adrs/0014-runtime-signing-tx-with-hardware-wallet",permalink:"/adrs/0014-runtime-signing-tx-with-hardware-wallet",draft:!1,editUrl:"https://github.com/oasisprotocol/adrs/edit/main/0014-runtime-signing-tx-with-hardware-wallet.md",tags:[],version:"current",lastUpdatedAt:1662724285,formattedLastUpdatedAt:"Sep 9, 2022",frontMatter:{},sidebar:"adrs",previous:{title:"ADR 0013: Runtime Upgrade Improvements",permalink:"/adrs/0013-runtime-upgrades"}},p={},d=[{value:"Component",id:"component",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Test vectors",id:"test-vectors",level:3},{value:"Runtime transaction format",id:"runtime-transaction-format",level:3},{value:"Decision",id:"decision",level:2},{value:"APDUSPEC additions",id:"apduspec-additions",level:3},{value:"GET_ADDR_SECP256K1",id:"get_addr_secp256k1",level:4},{value:"Command",id:"command",level:5},{value:"Response",id:"response",level:5},{value:"GET_ADDR_SR25519",id:"get_addr_sr25519",level:4},{value:"Command",id:"command-1",level:5},{value:"Response",id:"response-1",level:5},{value:"SIGN_PT_ED25519",id:"sign_pt_ed25519",level:4},{value:"Command",id:"command-2",level:5},{value:"Response",id:"response-2",level:5},{value:"SIGN_PT_SECP256K1",id:"sign_pt_secp256k1",level:4},{value:"Command",id:"command-3",level:5},{value:"Response",id:"response-3",level:5},{value:"SIGN_PT_SR25519",id:"sign_pt_sr25519",level:4},{value:"Command",id:"command-4",level:5},{value:"Response",id:"response-4",level:5},{value:"Signing deposit, withdrawal and transfer transactions",id:"signing-deposit-withdrawal-and-transfer-transactions",level:3},{value:"Allowance (consensus layer!)",id:"allowance-consensus-layer",level:4},{value:"Deposit",id:"deposit",level:4},{value:"Withdraw",id:"withdraw",level:4},{value:"Transfer",id:"transfer",level:4},{value:"Example",id:"example",level:4},{value:"Signing unencrypted smart contract transactions",id:"signing-unencrypted-smart-contract-transactions",level:3},{value:"Uploading smart contract",id:"uploading-smart-contract",level:4},{value:"Instantiating smart contract",id:"instantiating-smart-contract",level:4},{value:"Calling smart contract",id:"calling-smart-contract",level:4},{value:"Upgrading smart contracts",id:"upgrading-smart-contracts",level:4},{value:"Example",id:"example-1",level:4},{value:"Signing encrypted transactions",id:"signing-encrypted-transactions",level:3},{value:"Signing EVM transactions",id:"signing-evm-transactions",level:3},{value:"Creating smart contract",id:"creating-smart-contract",level:4},{value:"Calling smart contract",id:"calling-smart-contract-1",level:4},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Consideration of <code>roothash.SubmitMsg</code> transactions",id:"consideration-of-roothashsubmitmsg-transactions",level:4},{value:"Signing contract uploads on hardware wallets",id:"signing-contract-uploads-on-hardware-wallets",level:4},{value:"Consideration of adding <code>From</code> screen",id:"consideration-of-adding-from-screen",level:4},{value:"References",id:"references",level:2}],m={toc:d};function s(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"adr-0014-signing-runtime-transactions-with-hardware-wallet"},"ADR 0014: Signing Runtime Transactions with Hardware Wallet"),(0,l.kt)("h2",{id:"component"},"Component"),(0,l.kt)("p",null,"Oasis SDK"),(0,l.kt)("h2",{id:"changelog"},"Changelog"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"2022-07-15: Initial public version")),(0,l.kt)("h2",{id:"status"},"Status"),(0,l.kt)("p",null,"Proposed"),(0,l.kt)("h2",{id:"context"},"Context"),(0,l.kt)("p",null,"This document proposes the ",(0,l.kt)("a",{parentName:"p",href:"#apduspec-additions"},"APDUSPEC additions")," and\ngeneral UI/UX guidelines for signing Runtime transactions on Ledger and other\nhardware wallets:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#signing-deposit-withdrawal-and-transfer-transactions"},"Signing deposit, withdrawal and transfer transactions"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#signing-unencrypted-smart-contract-transactions"},"Signing unencrypted smart contract transactions"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#signing-encrypted-transactions"},"Signing encrypted transactions"),","),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#signing-evm-transactions"},"Signing EVM transactions"),".")),(0,l.kt)("h3",{id:"test-vectors"},"Test vectors"),(0,l.kt)("p",null,"Test vectors for the Runtime transactions can be generated by using\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-sdk/tree/main/tools/gen_runtime_vectors"},"gen_runtime_vectors")," tool as part of the Oasis SDK."),(0,l.kt)("h3",{id:"runtime-transaction-format"},"Runtime transaction format"),(0,l.kt)("p",null,"The structure of the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-sdk/blob/488447a1f72c948a3437993cca9e3fd83bcfe617/runtime-sdk/src/types/transaction.rs#L86-L96"},"Runtime transaction")," to be signed by the\nhardware wallet is the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'/// Transaction.\n#[derive(Clone, Debug, cbor::Encode, cbor::Decode)]\npub struct Transaction {\n   #[cbor(rename = "v")]\n   pub version: u16,\n\n   pub call: Call,\n\n   #[cbor(rename = "ai")]\n   pub auth_info: AuthInfo,\n}\n')),(0,l.kt)("p",null,"The transaction ",(0,l.kt)("strong",{parentName:"p"},"can be signed with ",(0,l.kt)("inlineCode",{parentName:"strong"},"Secp256k1"),' ("Ethereum"), ',(0,l.kt)("inlineCode",{parentName:"strong"},"Ed25519")," key,\nor ",(0,l.kt)("inlineCode",{parentName:"strong"},"Sr25519")," key!")," Information on this along with the gas fee is stored inside\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-sdk/blob/488447a1f72c948a3437993cca9e3fd83bcfe617/runtime-sdk/src/types/transaction.rs#L159-L173"},(0,l.kt)("inlineCode",{parentName:"a"},"ai")," field"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"call")," is defined as ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-sdk/blob/488447a1f72c948a3437993cca9e3fd83bcfe617/runtime-sdk/src/types/transaction.rs#L129-L146"},"follows"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'/// Method call.\n#[derive(Clone, Debug, cbor::Encode, cbor::Decode)]\npub struct Call {\n   /// Call format.\n   #[cbor(optional, default)]\n   pub format: CallFormat,\n   /// Method name.\n   #[cbor(optional, default, skip_serializing_if = "String::is_empty")]\n   pub method: String,\n   /// Method body.\n   pub body: cbor::Value,\n   /// Read-only flag.\n   ///\n   /// A read-only call cannot make any changes to runtime state. Any attempt at modifying state\n   /// will result in the call failing.\n   #[cbor(optional, default, rename = "ro")]\n   pub read_only: bool,\n}\n')),(0,l.kt)("p",null,"If ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-sdk/blob/488447a1f72c948a3437993cca9e3fd83bcfe617/runtime-sdk/src/types/transaction.rs#L113-L121"},(0,l.kt)("inlineCode",{parentName:"a"},"format"))," equals ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),", the transaction is unencrypted\nand it is CBOR-encoded inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"body")," field."),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"format")," equals ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),", the transaction is encrypted. In this case ",(0,l.kt)("inlineCode",{parentName:"p"},"method")," is\nempty and ",(0,l.kt)("inlineCode",{parentName:"p"},"body")," contains a CBOR-encoded\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-sdk/blob/488447a1f72c948a3437993cca9e3fd83bcfe617/runtime-sdk/src/types/callformat.rs#L7-L16"},(0,l.kt)("inlineCode",{parentName:"a"},"CallEnvelopeX25519DeoxysII"))," which includes the\nencrypted transaction body inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," field."),(0,l.kt)("h2",{id:"decision"},"Decision"),(0,l.kt)("h3",{id:"apduspec-additions"},"APDUSPEC additions"),(0,l.kt)("h4",{id:"get_addr_secp256k1"},"GET_ADDR_SECP256K1"),(0,l.kt)("h5",{id:"command"},"Command"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CLA"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Application Identifier"),(0,l.kt)("td",{parentName:"tr",align:null},"0x05")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"INS"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Instruction ID"),(0,l.kt)("td",{parentName:"tr",align:null},"0x04")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"P1"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Request User confirmation"),(0,l.kt)("td",{parentName:"tr",align:null},"No = 0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"P2"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Parameter 2"),(0,l.kt)("td",{parentName:"tr",align:null},"ignored")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"L"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Bytes in payload"),(0,l.kt)("td",{parentName:"tr",align:null},"(depends)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"44")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[1]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"60")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[3]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[4]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")))),(0,l.kt)("p",null,"The first three items in the derivation path are hardened."),(0,l.kt)("h5",{id:"response"},"Response"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Note"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"PK"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (32)"),(0,l.kt)("td",{parentName:"tr",align:null},"Public Key"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ADDR"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (??)"),(0,l.kt)("td",{parentName:"tr",align:null},"Hex addr"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SW1-SW2"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Return code"),(0,l.kt)("td",{parentName:"tr",align:null},"see list of return codes")))),(0,l.kt)("h4",{id:"get_addr_sr25519"},"GET_ADDR_SR25519"),(0,l.kt)("h5",{id:"command-1"},"Command"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CLA"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Application Identifier"),(0,l.kt)("td",{parentName:"tr",align:null},"0x05")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"INS"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Instruction ID"),(0,l.kt)("td",{parentName:"tr",align:null},"0x03")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"P1"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Request User confirmation"),(0,l.kt)("td",{parentName:"tr",align:null},"No = 0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"P2"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Parameter 2"),(0,l.kt)("td",{parentName:"tr",align:null},"ignored")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"L"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Bytes in payload"),(0,l.kt)("td",{parentName:"tr",align:null},"(depends)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"44")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[1]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"474")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[3]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[4]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")))),(0,l.kt)("p",null,"The first three items in the derivation path are hardened."),(0,l.kt)("h5",{id:"response-1"},"Response"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Note"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"PK"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (32)"),(0,l.kt)("td",{parentName:"tr",align:null},"Public Key"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ADDR"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (??)"),(0,l.kt)("td",{parentName:"tr",align:null},"Bech 32 addr"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SW1-SW2"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Return code"),(0,l.kt)("td",{parentName:"tr",align:null},"see list of return codes")))),(0,l.kt)("h4",{id:"sign_pt_ed25519"},"SIGN_PT_ED25519"),(0,l.kt)("h5",{id:"command-2"},"Command"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CLA"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Application Identifier"),(0,l.kt)("td",{parentName:"tr",align:null},"0x05")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"INS"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Instruction ID"),(0,l.kt)("td",{parentName:"tr",align:null},"0x05")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"P1"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Payload desc"),(0,l.kt)("td",{parentName:"tr",align:null},"0 = init")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"1 = add")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2 = last")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"P2"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"----"),(0,l.kt)("td",{parentName:"tr",align:null},"not used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"L"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Bytes in payload"),(0,l.kt)("td",{parentName:"tr",align:null},"(depends)")))),(0,l.kt)("p",null,"The first packet/chunk includes only the derivation path."),(0,l.kt)("p",null,"All other packets/chunks should contain message to sign."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"First Packet")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"44")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[1]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"474")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[3]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[4]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Other Chunks/Packets")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes..."),(0,l.kt)("td",{parentName:"tr",align:null},"Meta+Message"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,"Data is defined as:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Meta"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes.."),(0,l.kt)("td",{parentName:"tr",align:null},"CBOR metadata to verify"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Message"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes.."),(0,l.kt)("td",{parentName:"tr",align:null},"CBOR data to sign"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h5",{id:"response-2"},"Response"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Note"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SIG"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (64)"),(0,l.kt)("td",{parentName:"tr",align:null},"Signature"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SW1-SW2"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Return code"),(0,l.kt)("td",{parentName:"tr",align:null},"see list of return codes")))),(0,l.kt)("h4",{id:"sign_pt_secp256k1"},"SIGN_PT_SECP256K1"),(0,l.kt)("h5",{id:"command-3"},"Command"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CLA"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Application Identifier"),(0,l.kt)("td",{parentName:"tr",align:null},"0x05")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"INS"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Instruction ID"),(0,l.kt)("td",{parentName:"tr",align:null},"0x07")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"P1"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Payload desc"),(0,l.kt)("td",{parentName:"tr",align:null},"0 = init")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"1 = add")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2 = last")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"P2"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"----"),(0,l.kt)("td",{parentName:"tr",align:null},"not used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"L"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Bytes in payload"),(0,l.kt)("td",{parentName:"tr",align:null},"(depends)")))),(0,l.kt)("p",null,"The first packet/chunk includes only the derivation path."),(0,l.kt)("p",null,"All other packets/chunks should contain message to sign."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"First Packet")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"44")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[1]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"60")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[3]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[4]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Other Chunks/Packets")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes..."),(0,l.kt)("td",{parentName:"tr",align:null},"Meta+Message"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,"Data is defined as:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Meta"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes.."),(0,l.kt)("td",{parentName:"tr",align:null},"CBOR metadata to verify"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Message"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes.."),(0,l.kt)("td",{parentName:"tr",align:null},"CBOR data to sign"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h5",{id:"response-3"},"Response"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Note"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SIG"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (64)"),(0,l.kt)("td",{parentName:"tr",align:null},"Signature"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SW1-SW2"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Return code"),(0,l.kt)("td",{parentName:"tr",align:null},"see list of return codes")))),(0,l.kt)("h4",{id:"sign_pt_sr25519"},"SIGN_PT_SR25519"),(0,l.kt)("h5",{id:"command-4"},"Command"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CLA"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Application Identifier"),(0,l.kt)("td",{parentName:"tr",align:null},"0x05")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"INS"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Instruction ID"),(0,l.kt)("td",{parentName:"tr",align:null},"0x06")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"P1"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Payload desc"),(0,l.kt)("td",{parentName:"tr",align:null},"0 = init")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"1 = add")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"2 = last")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"P2"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"----"),(0,l.kt)("td",{parentName:"tr",align:null},"not used")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"L"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Bytes in payload"),(0,l.kt)("td",{parentName:"tr",align:null},"(depends)")))),(0,l.kt)("p",null,"The first packet/chunk includes only the derivation path."),(0,l.kt)("p",null,"All other packets/chunks should contain message to sign."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"First Packet")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"44")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[1]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"474")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[2]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[3]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Path","[4]"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (4)"),(0,l.kt)("td",{parentName:"tr",align:null},"Derivation Path Data"),(0,l.kt)("td",{parentName:"tr",align:null},"?")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Other Chunks/Packets")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Data"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes..."),(0,l.kt)("td",{parentName:"tr",align:null},"Meta+Message"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,"Data is defined as:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Expected"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Meta"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes.."),(0,l.kt)("td",{parentName:"tr",align:null},"CBOR metadata to verify"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Message"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes.."),(0,l.kt)("td",{parentName:"tr",align:null},"CBOR data to sign"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h5",{id:"response-4"},"Response"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Content"),(0,l.kt)("th",{parentName:"tr",align:null},"Note"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SIG"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (64)"),(0,l.kt)("td",{parentName:"tr",align:null},"Signature"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SW1-SW2"),(0,l.kt)("td",{parentName:"tr",align:null},"byte (2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Return code"),(0,l.kt)("td",{parentName:"tr",align:null},"see list of return codes")))),(0,l.kt)("h3",{id:"signing-deposit-withdrawal-and-transfer-transactions"},"Signing deposit, withdrawal and transfer transactions"),(0,l.kt)("h4",{id:"allowance-consensus-layer"},"Allowance (consensus layer!)"),(0,l.kt)("p",null,"The allowance transaction is part of the consensus layer. In this document we\npropose an improved UI:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|     Type     > | <    To    > | <    Amount    > | <     Fee     > | < Gas limit > | <  Network  > | <             > | <              |\n|   Allowance    |     <TO>     |  ROSE +-<AMOUNT> |    ROSE <FEE>   |  <GAS LIMIT>  |   <NETWORK>   |     APPROVE     |     REJECT     |\n|                |              |                  |                 |               |               |                 |                |\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"IMPROVEMENT:")," The hardware wallet renders the\nfollowing in place of ",(0,l.kt)("inlineCode",{parentName:"p"},"TO")," for specific ",(0,l.kt)("inlineCode",{parentName:"p"},"NETWORK")," and addresses:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Network: Mainnet, To: ",(0,l.kt)("inlineCode",{parentName:"li"},"oasis1qrnu9yhwzap7rqh6tdcdcpz0zf86hwhycchkhvt8")," \u2192 ",(0,l.kt)("inlineCode",{parentName:"li"},"Cipher")),(0,l.kt)("li",{parentName:"ul"},"Network: Testnet, To: ",(0,l.kt)("inlineCode",{parentName:"li"},"oasis1qqdn25n5a2jtet2s5amc7gmchsqqgs4j0qcg5k0t")," \u2192 ",(0,l.kt)("inlineCode",{parentName:"li"},"Cipher")),(0,l.kt)("li",{parentName:"ul"},"Network: Mainnet, To: ",(0,l.kt)("inlineCode",{parentName:"li"},"oasis1qzvlg0grjxwgjj58tx2xvmv26era6t2csqn22pte")," \u2192 ",(0,l.kt)("inlineCode",{parentName:"li"},"Emerald")),(0,l.kt)("li",{parentName:"ul"},"Network: Testnet, To: ",(0,l.kt)("inlineCode",{parentName:"li"},"oasis1qr629x0tg9gm5fyhedgs9lw5eh3d8ycdnsxf0run")," \u2192 ",(0,l.kt)("inlineCode",{parentName:"li"},"Emerald"))),(0,l.kt)("p",null,"Check the ",(0,l.kt)("a",{parentName:"p",href:"/node/mainnet/"},"Mainnet network parameters")," and ",(0,l.kt)("a",{parentName:"p",href:"/node/testnet/"},"Testnet network parameters")," pages\nto obtain the current hash of the genesis document for Mainnet and Testnet\nnetworks respectively."),(0,l.kt)("p",null,"The mapping above should be hardcoded into the hardware wallet app. If you\nare interested in how addresses were derived from the Runtime ID check the\n",(0,l.kt)("a",{parentName:"p",href:"/core/consensus/services/staking#runtime-accounts"},"staking document"),"."),(0,l.kt)("h4",{id:"deposit"},"Deposit"),(0,l.kt)("p",null,"We propose the following UI for ",(0,l.kt)("inlineCode",{parentName:"p"},"consensus.Deposit")," Runtime transaction:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|     Type     > | <   To (1/1)  > | <   Amount    > | <     Fee     > | < Gas limit > | <  Network  > | <  ParaTime  > | <             > | <               |\n|    Deposit     |    <MIXED_TO>   | <SYM> <AMOUNT>  |  <SYM> <FEE>    |  <GAS LIMIT>  |   <NETWORK>   |    <RUNTIME>   |     APPROVE     |      REJECT     |\n|   (ParaTime)   |                 |                 |                 |               |               |                |                 |                 |\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"MIXED_TO")," can either be ",(0,l.kt)("inlineCode",{parentName:"p"},"oasis1")," or the Ethereum's ",(0,l.kt)("inlineCode",{parentName:"p"},"0x")," address. If ",(0,l.kt)("inlineCode",{parentName:"p"},"Meta"),"\ndoes not contain ",(0,l.kt)("inlineCode",{parentName:"p"},"orig_to")," field, render the ",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.body.to")," value in\n",(0,l.kt)("inlineCode",{parentName:"p"},"oasis1")," format in place of ",(0,l.kt)("inlineCode",{parentName:"p"},"MIXED_TO"),". If ",(0,l.kt)("inlineCode",{parentName:"p"},"Meta")," contains ",(0,l.kt)("inlineCode",{parentName:"p"},"orig_to")," field,\nthen:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Check that the ",(0,l.kt)("inlineCode",{parentName:"li"},"0x")," address stored in ",(0,l.kt)("inlineCode",{parentName:"li"},"orig_to")," field maps to the ",(0,l.kt)("inlineCode",{parentName:"li"},"oasis1"),"\naddress of ",(0,l.kt)("inlineCode",{parentName:"li"},"tx.call.body.to")," according to this ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/oasisprotocol/oasis-sdk/blob/e566b326ab1c34f3d811b50f96c53c3a79a91826/client-sdk/go/types/address.go#L134-L141"},"mapping function"),"."),(0,l.kt)("li",{parentName:"ol"},"Render ",(0,l.kt)("inlineCode",{parentName:"li"},"orig_to")," value in ",(0,l.kt)("inlineCode",{parentName:"li"},"0x")," format in place of ",(0,l.kt)("inlineCode",{parentName:"li"},"MIXED_TO"),".")),(0,l.kt)("p",null,"In addition, if ",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.body.to")," is empty, then the deposit is made to the\nsigner's account inside the Runtime. In this case ",(0,l.kt)("inlineCode",{parentName:"p"},"Self")," literal is rendered in\nplace of ",(0,l.kt)("inlineCode",{parentName:"p"},"MIXED_TO"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"AMOUNT")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"FEE")," show the amount of tokens transferred in the transaction and\nthe transaction fee. The number must be formatted according to the number of\ndecimal places and showing a corresponding symbol ",(0,l.kt)("inlineCode",{parentName:"p"},"SYM")," beside. These are\ndetermined by the following mapping hardcoded in the hardware wallet:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"(Network, Runtime ID, Denomination) \u2192 (Number of decimals, SYM)")),(0,l.kt)("p",null,"Denomination information is stored in ",(0,l.kt)("inlineCode",{parentName:"p"},"tx.part.body.amount[1]")," or\n",(0,l.kt)("inlineCode",{parentName:"p"},"tx.ai.fee.amount[1]")," for the tokens transferred in the transaction or the fee\nrespectively. Empty Denomination is valid and signifies the native token\nfor the known networks and Runtime IDs (see below)."),(0,l.kt)("p",null,"The hardware wallet should have at least the following mappings hardcoded:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'Network: Mainnet, Runtime ID: Cipher, Denomination: "" \u2192 9, ',(0,l.kt)("inlineCode",{parentName:"li"},"ROSE")),(0,l.kt)("li",{parentName:"ul"},'Network: Testnet, Runtime ID: Cipher, Denomination: "" \u2192 9, ',(0,l.kt)("inlineCode",{parentName:"li"},"TEST")),(0,l.kt)("li",{parentName:"ul"},'Network: Mainnet, Runtime ID: Emerald, Denomination: "" \u2192 18, ',(0,l.kt)("inlineCode",{parentName:"li"},"ROSE")),(0,l.kt)("li",{parentName:"ul"},'Network: Testnet, Runtime ID: Emerald, Denomination: "" \u2192 18, ',(0,l.kt)("inlineCode",{parentName:"li"},"TEST"))),(0,l.kt)("p",null,"If the lookup fails, the following policy should be respected:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"SYM")," is rendered as empty string."),(0,l.kt)("li",{parentName:"ol"},"The number of decimals is 18, if Runtime ID matches any Emerald Runtime on\nany network."),(0,l.kt)("li",{parentName:"ol"},"Otherwise, the number of decimals is 9.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"RUNTIME")," shows the 32-byte hex encoded Runtime ID stored in ",(0,l.kt)("inlineCode",{parentName:"p"},"Meta.runtime_id"),".\nIf ",(0,l.kt)("inlineCode",{parentName:"p"},"NETWORK")," matches Mainnet or Testnet, then human-readable version of\n",(0,l.kt)("inlineCode",{parentName:"p"},"RUNTIME")," is shown:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Network: Mainnet, Runtime ID: ",(0,l.kt)("inlineCode",{parentName:"li"},"000000000000000000000000000000000000000000000000e199119c992377cb")," \u2192 ",(0,l.kt)("inlineCode",{parentName:"li"},"Cipher")),(0,l.kt)("li",{parentName:"ul"},"Network: Testnet, Runtime ID: ",(0,l.kt)("inlineCode",{parentName:"li"},"0000000000000000000000000000000000000000000000000000000000000000")," \u2192 ",(0,l.kt)("inlineCode",{parentName:"li"},"Cipher")),(0,l.kt)("li",{parentName:"ul"},"Network: Mainnet, Runtime ID: ",(0,l.kt)("inlineCode",{parentName:"li"},"000000000000000000000000000000000000000000000000e2eaa99fc008f87f")," \u2192 ",(0,l.kt)("inlineCode",{parentName:"li"},"Emerald")),(0,l.kt)("li",{parentName:"ul"},"Network: Testnet, Runtime ID: ",(0,l.kt)("inlineCode",{parentName:"li"},"00000000000000000000000000000000000000000000000072c8215e60d5bca7")," \u2192 ",(0,l.kt)("inlineCode",{parentName:"li"},"Emerald"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"SAFETY CHECK:")," Runtime chain domain separation context ",(0,l.kt)("inlineCode",{parentName:"p"},"Meta.sig_context"),"\nmust be verified before showing transaction details: The last 64 characters\nmust match the hex value of the hash derived from ",(0,l.kt)("inlineCode",{parentName:"p"},"Meta.runtime_id")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"Meta.chain_context")," on the consensus. See ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-sdk/blob/e566b326ab1c34f3d811b50f96c53c3a79a91826/client-sdk/go/crypto/signature/context.go"},"golang implementation")," for the reference implementation."),(0,l.kt)("h4",{id:"withdraw"},"Withdraw"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"consensus.Withdraw")," transaction should have the following UI on the\nhardware wallet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|     Type     > | <   To (1/1)  > | <   Amount    > | <     Fee     > | < Gas limit > | <  Network  > | <  ParaTime  > | <             > | <               |\n|   Withdraw     |       <TO>      |  <SYM> <AMOUNT> |   <SYM> <FEE>   |  <GAS LIMIT>  |   <NETWORK>   |   <RUNTIME>    |     APPROVE     |      REJECT     |\n|  (ParaTime)    |                 |                 |                 |               |               |                |                 |                 |\n")),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.body.to")," is empty, then the withdrawal is made to the signer's\nconsensus account. In this case ",(0,l.kt)("inlineCode",{parentName:"p"},"Self")," literal is rendered in\nplace of ",(0,l.kt)("inlineCode",{parentName:"p"},"TO"),"."),(0,l.kt)("h4",{id:"transfer"},"Transfer"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"accounts.Transfer")," transaction should have the following UI on the\nhardware wallet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|     Type     > | <   To (1/1)  > | <   Amount    > | <     Fee     > | < Gas limit > | <  Network  > | <  ParaTime  > | <             > | <               |\n|   Transfer     |    <MIXED_TO>   | <SYM> <AMOUNT>  |   <SYM> <FEE>   |  <GAS LIMIT>  |   <NETWORK>   |   <RUNTIME>    |     APPROVE     |      REJECT     |\n|  (ParaTime)    |                 |                 |                 |               |               |                |                 |                 |\n")),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("p",null,"The user wants to deposit 100 ROSE to\n",(0,l.kt)("inlineCode",{parentName:"p"},"0xDce075E1C39b1ae0b75D554558b6451A226ffe00")," account on Emerald on the Mainnet.\nFirst they sign the deposit allowance transaction for Emerald."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|     Type     > | <    To    > | <   Amount   > | < Gas limit > | <     Fee     > | <  Network  > | <             > | <              |\n|   Allowance    |   Emerald    |  ROSE +100.0   |     1277      |     ROSE 0.0    |    Mainnet    |     APPROVE     |     REJECT     |\n|                |   Mainnet    |                |               |                 |               |                 |                |\n")),(0,l.kt)("p",null,"Next, they sign the Runtime deposit transaction."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|     Type     > | <   To (1/2)  > | <    To (2/2)   > | <   Amount    > | <     Fee     > | < Gas limit > | <  Network  > | <  ParaTime  > | <             > | <               |\n|    Deposit     | 0xDce075E1C39b1 | 451A226ffe00      |   ROSE 100.0    |     ROSE 0.0    |     11310     |    Mainnet    |     Emerald    |     APPROVE     |      REJECT     |\n|   (ParaTime)   | ae0b75D554558b6 |                   |                 |                 |               |               |                |                 |                 |\n")),(0,l.kt)("p",null,"Then, they transfer some tokens to another account inside the Runtime:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|     Type     > | <    To (1/2)  > | <    To (2/2)   > | <   Amount    > | <     Fee     > | < Gas limit > | <  Network  > | <  ParaTime  > | <             > | <               |\n|   Transfer     | oasis1qpupfu7e2n | m8anj64ytrayne    |   ROSE 10.0     |  ROSE 0.00015   |     11311     |    Mainnet    |    Emerald     |     APPROVE     |      REJECT     |\n|  (ParaTime)    | 6pkezeaw0yhj8mce |                   |                 |                 |               |               |                |                 |                 |\n")),(0,l.kt)("p",null,"Finally, the user withdraws the remainder of tokens back to the Mainnet."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|     Type     > | <    To (1/2)  > | <    To (2/2)   > | <   Amount    > | <     Fee     > | < Gas limit > | <  Network  > | <  ParaTime  > | <             > | <               |\n|   Withdraw     | oasis1qrec770vre | 504k68svq7kzve    |  ROSE 99.9997   |  ROSE 0.00015   |     11311     |    Mainnet    |    Emerald     |     APPROVE     |      REJECT     |\n|  (ParaTime)    | k0a9a5lcrv0zvt22 |                   |                 |                 |               |               |                |                 |                 |\n")),(0,l.kt)("h3",{id:"signing-unencrypted-smart-contract-transactions"},"Signing unencrypted smart contract transactions"),(0,l.kt)("h4",{id:"uploading-smart-contract"},"Uploading smart contract"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"contracts.Upload")," transaction will not be signed by the hardware wallet\nbecause the size of the Wasm byte code to sign may easily exceed the maximum\nsize of the available encrypted memory."),(0,l.kt)("h4",{id:"instantiating-smart-contract"},"Instantiating smart contract"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"contracts.Instantiate")," should have the following UI on the hardware wallet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|  Review Contract > | < Code ID > | < Amount (1/1) > | < Data (1/1) > | ... | <    Fee    > | < Gas limit > | <  Network  > | <  ParaTime  > | <             > | <               |\n|   Instantiation    |  <CODE ID>  |   <AMOUNT...>    |     <DATA>     | ... |  <SYM> <FEE>  |  <GAS LIMIT>  |   <NETWORK>   |   <RUNTIME>    |     APPROVE     |      REJECT     |\n|    (ParaTime)      |             |                  |                | ... |               |               |               |                |                 |                 |\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"DATA")," is a JSON-like representation of ",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.body.data"),", if the latter\nis a CBOR-encoded map. If ",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.body.data")," is empty or not present,\nthen Data screen is hidden. If ",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.body.data")," is in some other format,\nrequire ",(0,l.kt)("strong",{parentName:"p"},"blind signing")," mode and hide Data screen."),(0,l.kt)("p",null,"Blind signing means that the user does not see all contract information. In some\ncases - as is this - not even the amount or the contract address! ",(0,l.kt)("strong",{parentName:"p"},"When\nsigning blindly, it is crucial that the user trusts the client application that\nit generated a non-malicious transaction!")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"AMOUNT...")," is the amount of tokens sent. Contract SDK supports sending\nmultiple tokens at once, each with its own denomination symbol. The hardware\nwallet should render all of them, one per page. For rendering rules of each\n",(0,l.kt)("inlineCode",{parentName:"p"},"AMOUNT")," consult the ",(0,l.kt)("a",{parentName:"p",href:"#deposit"},(0,l.kt)("inlineCode",{parentName:"a"},"consensus.Deposit"))," behavior."),(0,l.kt)("p",null,"There can be multiple Data screens Data 1, Data 2, ..., Data N for each key in\n",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.body.data")," map. ",(0,l.kt)("inlineCode",{parentName:"p"},"DATA")," can be one of the following types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"string"),(0,l.kt)("li",{parentName:"ul"},"number (integer, float)"),(0,l.kt)("li",{parentName:"ul"},"array"),(0,l.kt)("li",{parentName:"ul"},"map"),(0,l.kt)("li",{parentName:"ul"},"boolean"),(0,l.kt)("li",{parentName:"ul"},"null")),(0,l.kt)("p",null,"Strings are rendered as UTF-8 strings and the following characters need to be\nescaped: ",(0,l.kt)("inlineCode",{parentName:"p"},":"),", ",(0,l.kt)("inlineCode",{parentName:"p"},","),", ",(0,l.kt)("inlineCode",{parentName:"p"},"}"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"]"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"\u2026"),"."),(0,l.kt)("p",null,"Numbers are rendered in standard general base-10 encoding. Floats use decimal\nperiod and should be rendered with at least one decimal."),(0,l.kt)("p",null,"For strings and numbers that cannot fit a single page, a pagination is\nactivated."),(0,l.kt)("p",null,"Boolean and null values are rendered as ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," respectively\non a single page."),(0,l.kt)("p",null,"Array and map is rendered in form ",(0,l.kt)("inlineCode",{parentName:"p"},"VAL1,VAL2,...")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"KEY1:VAL1,KEY1:VAL1,..."),"\nrespectively. For security, ",(0,l.kt)("strong",{parentName:"p"},"the items of the map must be sorted\nlexicographically by KEY"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"KEY")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"VAL")," can be of any supported type. If it\nis a map or array it is rendered as ",(0,l.kt)("inlineCode",{parentName:"p"},"{DATA}")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"[DATA]")," respectively\nto avoid disambiguation. Otherwise, it is just ",(0,l.kt)("inlineCode",{parentName:"p"},"DATA"),"."),(0,l.kt)("p",null,"If the content of an array or a map cannot fit a single page, no pagination\nis introduced. Instead, the content is trimmed, ellipsis ",(0,l.kt)("inlineCode",{parentName:"p"},"\u2026")," is appended at\nthe end and the screen ",(0,l.kt)("strong",{parentName:"p"},"becomes confirmable"),". If the user double-clicks it, a\nsubscreen for item ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," of an array or a map is shown. There is one subscreen\nfor each item of the array or a map of size ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," titled Data n.1,\nData n.2, ..., Data n.N which renders the item ",(0,l.kt)("inlineCode",{parentName:"p"},"n")," as\n",(0,l.kt)("inlineCode",{parentName:"p"},"DATA")," for an array item or ",(0,l.kt)("inlineCode",{parentName:"p"},"DATA:DATA")," for a map item:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|   Data 1.1 (1/1) > | < Data 1.2 (1/1) | < Data 1.3 (1/1) | ... | <          |\n|       <DATA>       |      <DATA>      |      <DATA>      |     |    BACK    |\n|                    |                  |                  |     |            |\n")),(0,l.kt)("p",null,"The recursive approach described above allows user to browse through a complete\ntree of data stracture (typically a request name along with the arguments) by\nusing \u2b05\ufe0f and \u27a1\ufe0f buttons, visit a child by double-clicking and returning to a\nparent node by confirming the ",(0,l.kt)("em",{parentName:"p"},"BACK")," screen."),(0,l.kt)("p",null,"The maximum string length, the length of the array, the depth of a map must\nhave reasonable limits on the hardware wallet. If that limit is exceeded, the\nhardware wallet displays an error on the initial screen. Then, if the user\nstill wants to sign such a transaction, they need to enable ",(0,l.kt)("strong",{parentName:"p"},"blind signing"),"."),(0,l.kt)("p",null,"The following UI is shown when blind-signing a non-encrypted transaction due\nto too complex function parameters."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|  Review Contract > | < BLIND > | < Instance ID (1/1) > | <   Amount    > | <     Fee     > | <  Network  > | <  ParaTime > | <            > | <             |\n|   Instantiation    |  SIGNING! |     <INSTANCE ID>     | <SYM> <AMOUNT>  |   <SYM> <FEE>   |   <NETWORK>   |   <RUNTIME>   |    APPROVE     |     REJECT    |\n|    (ParaTime)      |           |                       |                 |                 |               |               |                |               |\n")),(0,l.kt)("h4",{id:"calling-smart-contract"},"Calling smart contract"),(0,l.kt)("p",null,"The hardware wallet should show details of the Runtime transaction to the\nuser, when this is possible. ",(0,l.kt)("inlineCode",{parentName:"p"},"contracts.Call")," should have the following UI on\nthe hardware wallet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"| Review Contract > | < Instance ID > | < Amount (1/1) > | < Data (1/1) > | ... | <     Fee     > | < Gas limit > | <  Network  > | <  ParaTime  > | <             > | <              |\n|      Call         |  <INSTANCE ID>  |   <AMOUNT...>    |     <DATA>     | ... |   <SYM> <FEE>   |  <GAS LIMIT>  |   <NETWORK>   |   <RUNTIME>    |     APPROVE     |     REJECT     |\n|   (ParaTime)      |                 |                  |                | ... |                 |               |               |                |                 |                |\n")),(0,l.kt)("p",null,"The Data screen behavior is the same as for\n",(0,l.kt)("a",{parentName:"p",href:"#instantiating-smart-contract"},(0,l.kt)("inlineCode",{parentName:"a"},"contracts.Instantiate"))," transaction."),(0,l.kt)("h4",{id:"upgrading-smart-contracts"},"Upgrading smart contracts"),(0,l.kt)("p",null,"Signing ",(0,l.kt)("inlineCode",{parentName:"p"},"contracts.Upgrade")," should show the following UI on the hardware wallet:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|  Review Contract > | < Instance ID (1/1) > | < Amount (1/1) > | < New Code ID (1/1) > | < Data (1/1) > | ... | < ParaTime > | <     Fee     > | < Gas limit > | < Network > | < ParaTime > | <             > | <               |\n|      Upgrade       |     <INSTANCE ID>     |   <AMOUNT...>    |      <CODE_ID>        |     <DATA>     |     |  <RUNTIME>   |   <SYM> <FEE>   |  <GAS LIMIT>  |  <NETWORK>  |  <RUNTIME>   |    APPROVE      |      REJECT     |\n|    (ParaTime)      |                       |                  |                       |                |     |              |                 |               |             |              |                 |                 |\n")),(0,l.kt)("p",null,"The Data screen behavior is the same as for\n",(0,l.kt)("a",{parentName:"p",href:"#instantiating-smart-contract"},(0,l.kt)("inlineCode",{parentName:"a"},"contracts.Instantiate"))," transaction."),(0,l.kt)("h4",{id:"example-1"},"Example"),(0,l.kt)("p",null,"To upload, instantiate and call the ",(0,l.kt)("a",{parentName:"p",href:"/dapp/cipher/hello-world#deploying-the-contract"},"hello world example")," running on Testnet\nCipher the user first signs the contract upload transaction with a file-based\ned25519 keypair. The user obtains the ",(0,l.kt)("inlineCode",{parentName:"p"},"Code ID")," 3 for the uploaded contract."),(0,l.kt)("p",null,"Next, the user instantiates the contract and obtains the ",(0,l.kt)("inlineCode",{parentName:"p"},"Instance ID")," 2."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|  Review Contract > | < Code ID > | <  Amount  > | <      Data      > | <    Fee    > | < Gas limit > | <  Network  > | <  ParaTime  > | <             > | <               |\n|   Instantiation    |      3      |   ROSE 0.0   | {instantiate:{init |   ROSE 0.0    |     1348      |    Mainnet    |     Cipher     |     APPROVE     |      REJECT     |\n|    (ParaTime)      |             |              | ial_counter:42}}   |               |               |               |                |                 |                 |                 |\n")),(0,l.kt)("p",null,"Finally, they perform a call to ",(0,l.kt)("inlineCode",{parentName:"p"},"say_hello")," function on a smart contract\npassing the ",(0,l.kt)("inlineCode",{parentName:"p"},'{"who":"me"}')," object as a function argument."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"| Review Contract > | < Instance ID > | <  Amount  > | <      Data      > | <     Fee     > | < Gas limit > | <  Network  > | <  ParaTime  > | <             > | <              |\n|      Call         |       2         |   ROSE 0.0   | {say_hello:{who:me |     ROSE 0.0    |     1283      |    Mainnet    |     Cipher     |     APPROVE     |     REJECT     |\n|   (ParaTime)      |                 |              | }}                 |                 |               |               |                |                 |                |\n")),(0,l.kt)("p",null,"As a complete example, the user can provide a more complex object:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "who": {\n    "username": "alice",\n    "client_secret": "e5868ebb4445fc2ad9f949956c1cb9ddefa0d421",\n    "last_logins": [1646835046, 1615299046, 1583763046, 1552140646],\n    "redirect": null\n  }\n}\n')),(0,l.kt)("p",null,"In this case the hardware wallet renders the following UI."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"| Review Contract > | <  Instance ID  > | <   Amount  > | <      Data      > | <     Fee     > | < Gas limit > | <  Network  > | <  ParaTime  > | <            > | <              |\n|      Call         |       2           |    ROSE 0.0   | {say_hello:{who:{u |    ROSE 0.15    |     1283      |    Mainnet    |     Cipher     |    APPROVE     |     REJECT     |\n|   (ParaTime)      |                   |               | sername:alice,cli\u2026 |                 |               |               |                |                |                |\n\n                                                        V                    V\n\n                                                        |       Data 1     > | <            |\n                                                        | say_hello:{who:{us |     BACK     |\n                                                        | ername:alice,clie\u2026 |              |\n\n                                                        V                    V\n\n                                                        |      Data 1.1    > | <            |\n                                                        | who:{username:alic |     BACK     |\n                                                        | e,client_secret:[\u2026 |              |\n\n                                                        V                    V\n\n                                                        |     Data 1.1.1   > | < Data 1.1.2 (1/2) > | < Data 1.1.2 (2/2) > | <    Data 1.1.3    > | <    Data 1.1.4    > | <            |\n                                                        | username:alice     | client_secret:e5868e | 1cb9ddefa0d421       | last_logins:[1646835 | redirect:null        |     BACK     |\n                                                        |                    | bb4445fc2ad9f949956c |                      | 046,1615299046,1583\u2026 |                      |              |\n\n                                                                                                                           V                      V\n\n                                                                                                                           |     Data 1.1.3.1   > | <   Data 1.1.3.2   > | <   Data 1.1.3.3   > | <   Data 1.1.3.4     | <            |\n                                                                                                                           |      1646835046      |      1615299046      |      1583763046      |      1552140646      |     BACK     |\n                                                                                                                           |                      |                      |                      |                      |              |\n")),(0,l.kt)("h3",{id:"signing-encrypted-transactions"},"Signing encrypted transactions"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/oasis-sdk/blob/488447a1f72c948a3437993cca9e3fd83bcfe617/runtime-sdk/src/types/callformat.rs#L7-L16"},"Encrypted transactions")," (",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.format != 0"),") contain\nthe call data encrypted with an ephemeral X25519DeoxysII key. The hardware\nwallet is not expected to implement this scheme and decrypt the transaction,\nneither it is safe to share the ephemeral key with anyone. Instead, the user\nmust enable ",(0,l.kt)("strong",{parentName:"p"},"blind signing")," and the hardware wallet should show the hash of\nthe encrypted transaction, the X25519DeoxysII public key and the nonce:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"| Review Encrypted > | < BLIND > | < Tx hash (1/1) > | < Public key (1/1) > | <  Nonce (1/1) > | <    Fee    > | < Gas limit > | <  Network  > | <  ParaTime > | <             > | <             |\n|   Transaction      |  SIGNING! |     <TX_HASH>     |     <PUBLIC_KEY>     |      <NONCE>     |  <SYM> <FEE>  |  <GAS LIMIT>  |   <NETWORK>   |   <RUNTIME>   |     APPROVE     |     REJECT    |\n|   (ParaTime)       |           |                   |                      |                  |               |               |               |               |                 |               |\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TX_HASH")," is a hex representation of sha256 checksum of ",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.data")," field."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PUBLIC_KEY")," is a hex representation of the 32-byte ",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.pk")," field."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"NONCE")," is a hex representation of the 15-byte ",(0,l.kt)("inlineCode",{parentName:"p"},"tx.call.nonce")," field."),(0,l.kt)("h3",{id:"signing-evm-transactions"},"Signing EVM transactions"),(0,l.kt)("h4",{id:"creating-smart-contract"},"Creating smart contract"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"evm.Create")," transaction will not be managed by the hardware wallet because the\nsize of the EVM byte code may easily exceed the wallet's encrypted memory size."),(0,l.kt)("h4",{id:"calling-smart-contract-1"},"Calling smart contract"),(0,l.kt)("p",null,"In contrast to ",(0,l.kt)("inlineCode",{parentName:"p"},"contracts.Call"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"evm.Call")," would require contract ABI in order\nto extract argument names which are stored in the RLP-encoded transaction on\nthe blockchain. We do not support this, so only ",(0,l.kt)("strong",{parentName:"p"},"blind signing")," is performed\nwhich the user needs to enable first. The UI should be as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ledger"},"|   Review EVM   > | < BLIND > | < Address (1/1) > | <   Amount    > | <     Fee     > | <  Network  > | <  ParaTime > | <            > | <             |\n|  Contract Call   |  SIGNING! |     <ADDRESS>     | <SYM> <AMOUNT>  |   <SYM> <FEE>   |   <NETWORK>   |   <RUNTIME>   |    APPROVE     |     REJECT    |\n|   (ParaTime)     |           |                   |                 |                 |               |               |                |               |\n")),(0,l.kt)("h2",{id:"consequences"},"Consequences"),(0,l.kt)("h3",{id:"positive"},"Positive"),(0,l.kt)("p",null,"Users will have a similar experience for signing Runtime transactions on any\nwallet implementing this ADR."),(0,l.kt)("h3",{id:"negative"},"Negative"),(0,l.kt)("p",null,"For some transactions, user will need to trust the client application and use\nblind signing."),(0,l.kt)("h3",{id:"neutral"},"Neutral"),(0,l.kt)("h4",{id:"consideration-of-roothashsubmitmsg-transactions"},"Consideration of ",(0,l.kt)("inlineCode",{parentName:"h4"},"roothash.SubmitMsg")," transactions"),(0,l.kt)("p",null,"This ADR does not propose a UI for ",(0,l.kt)("em",{parentName:"p"},"generic")," Runtime calls\n(",(0,l.kt)("inlineCode",{parentName:"p"},"roothash.SubmitMsg"),", see ",(0,l.kt)("a",{parentName:"p",href:"/adrs/0011-incoming-runtime-messages"},"ADR 11"),"). The proposed design in this ADR assumes a\nnew release of the hardware wallet app each time a new Runtime transaction type\nis introduced."),(0,l.kt)("h4",{id:"signing-contract-uploads-on-hardware-wallets"},"Signing contract uploads on hardware wallets"),(0,l.kt)("p",null,"In the future perhaps, if only the merkle root hash of the Wasm contract would\nbe contained in the transaction, signing such a contract could be feasible. See\nhow Ethereum 2.x contract deployment is done using this approach."),(0,l.kt)("h4",{id:"consideration-of-adding-from-screen"},"Consideration of adding ",(0,l.kt)("inlineCode",{parentName:"h4"},"From")," screen"),(0,l.kt)("p",null,"None of the proposed UIs and the existing implementation of signing the\nconsensus transactions on Ledger show ",(0,l.kt)("em",{parentName:"p"},"who")," is a signer of the transaction.\nThe signer's ",(0,l.kt)("em",{parentName:"p"},"from")," address can be extracted from\n",(0,l.kt)("inlineCode",{parentName:"p"},"tx.ai.si[0].address_spec.signature.<SIGNATURE TYPE>"),"\nfor oasis native address and if the signer wants to show the Ethereum address,\n",(0,l.kt)("inlineCode",{parentName:"p"},"Meta.orig_from")," should be populated and the hardware wallet should\nverify it before showing the tx."),(0,l.kt)("h2",{id:"references"},"References"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/Zondax/ledger-oasis/blob/master/docs/APDUSPEC.md"},"Existing APDU specification"))))}s.isMDXComponent=!0}}]);