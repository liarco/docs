"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[7534],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(a),h=r,m=u["".concat(p,".").concat(h)]||u[h]||c[h]||i;return a?n.createElement(m,o(o({ref:t},d),{},{components:a})):n.createElement(m,o({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},609:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={description:"Guide to creating secure dApps on Sapphire"},o="Guide",s={unversionedId:"dapp/sapphire/guide",id:"dapp/sapphire/guide",title:"Guide",description:"Guide to creating secure dApps on Sapphire",source:"@site/docs/dapp/sapphire/guide.md",sourceDirName:"dapp/sapphire",slug:"/dapp/sapphire/guide",permalink:"/dapp/sapphire/guide",draft:!1,editUrl:"https://github.com/oasisprotocol/docs/edit/main/docs/dapp/sapphire/guide.md",tags:[],version:"current",lastUpdatedAt:1665135874,formattedLastUpdatedAt:"Oct 7, 2022",frontMatter:{description:"Guide to creating secure dApps on Sapphire"},sidebar:"developers",previous:{title:"Quickstart",permalink:"/dapp/sapphire/quickstart"},next:{title:"Precompiles",permalink:"/dapp/sapphire/precompiles"}},p={},l=[{value:"Oasis Consensus Layer and Sapphire ParaTime",id:"oasis-consensus-layer-and-sapphire-paratime",level:2},{value:"Testnet and Mainnet",id:"testnet-and-mainnet",level:2},{value:"Sapphire vs Ethereum",id:"sapphire-vs-ethereum",level:2},{value:"Integrating Sapphire",id:"integrating-sapphire",level:2},{value:"Writing Secure dApps",id:"writing-secure-dapps",level:2},{value:"Wallets",id:"wallets",level:3},{value:"Languages &amp; Frameworks",id:"languages--frameworks",level:3},{value:"Transactions &amp; Calls",id:"transactions--calls",level:3},{value:"Contract State",id:"contract-state",level:3},{value:"Contract Logs",id:"contract-logs",level:3}],d={toc:l};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"guide"},"Guide"),(0,r.kt)("p",null,"This page mainly describes the differences between Sapphire and Ethereum\nsince there are a number of excellent tutorials on developing for Ethereum.\nIf you don't know where to begin, the ",(0,r.kt)("a",{parentName:"p",href:"https://hardhat.org/tutorial"},"Hardhat tutorial"),", ",(0,r.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org/en/v0.8.15/solidity-by-example.html"},"Solidity docs"),", and\n",(0,r.kt)("a",{parentName:"p",href:"/dapp/emerald/writing-dapps-on-emerald"},"Emerald dApp tutorial")," are great places to start. You can continue following\nthis guide once you've set up your development environment and have deployed\nyour contract to a non-confidential EVM network (e.g., Ropsten, Emerald)."),(0,r.kt)("h2",{id:"oasis-consensus-layer-and-sapphire-paratime"},"Oasis Consensus Layer and Sapphire ParaTime"),(0,r.kt)("p",null,"The Oasis Network consists of the consensus layer and a number of ParaTimes.\nParaTimes are independent replicated state machines that settle transactions\nusing the consensus layer (to learn more, check the ",(0,r.kt)("a",{parentName:"p",href:"/general/oasis-network/"},"Oasis Network Overview"),"). Sapphire is a ParaTime which implements the Ethereum\nVirtual Machine (EVM)."),(0,r.kt)("p",null,"The minimum and also expected block time in Sapphire is ",(0,r.kt)("strong",{parentName:"p"},"6 seconds"),". Any\nSapphire transaction will require at least this amount of time to be executed,\nand probably no more."),(0,r.kt)("p",null,"ParaTimes, Sapphire included, are not allowed to directly access your tokens stored\nin consensus layer accounts. You will need to ",(0,r.kt)("em",{parentName:"p"},"deposit")," tokens from your consensus\naccount to Sapphire. Consult the ",(0,r.kt)("a",{parentName:"p",href:"/general/manage-tokens/how-to-transfer-rose-into-paratime"},"How to transfer ROSE into an EVM ParaTime")," chapter to learn more."),(0,r.kt)("h2",{id:"testnet-and-mainnet"},"Testnet and Mainnet"),(0,r.kt)("p",null,"The Sapphire ParaTime is currently deployed on Testnet, with Mainnet deployment planned for later in 2022.\nThe Testnet should be considered unstable software and may have its state wiped at any\ntime. As the name implies, only use the Testnet for testing unless you're testing how angry\nyour users get when state is wiped."),(0,r.kt)("admonition",{title:"Never deploy production services on Testnet",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Because Testnet state can be wiped in the future, you should ",(0,r.kt)("strong",{parentName:"p"},"never")," deploy a\nproduction service on the Testnet! Just don't do it!")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"For testing purposes, visit our ",(0,r.kt)("a",{parentName:"p",href:"https://faucet.testnet.oasis.dev/"},"Testnet faucet")," to obtain some TEST which you\ncan then use on the Sapphire Testnet to pay for gas fees. The faucet supports\nsending TEST both to your consensus layer address or to your address inside the\nParaTime.")),(0,r.kt)("h2",{id:"sapphire-vs-ethereum"},"Sapphire vs Ethereum"),(0,r.kt)("p",null,"The Sapphire ParaTime is generally compatible with Ethereum, the EVM, and all of the\nuser and developer tooling that you already use. There are a few breaking changes,\nbut we think that you'll like them:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Contract state is only visible to the contract that wrote it. With respect\nto the contract API, it's as if all state variables are declared as ",(0,r.kt)("inlineCode",{parentName:"li"},"private"),", but\nwith the further restriction that not even full nodes can read the values. Public or\naccess-controlled values are provided instead through explicit getters."),(0,r.kt)("li",{parentName:"ul"},"Transactions and calls are end-to-end encrypted into the contract. Only the caller\nand the contract can see the data sent to/received from the ParaTime. This ends up\ndefeating most of the utility of block explorers, however."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"from")," address using of calls is derived from a signature attached to the call.\nUnsigned calls have their sender set to the zero address. This allows contract authors\nto write getters that release secrets to authenticated callers, but without\nrequiring a transaction to be posted on-chain.")),(0,r.kt)("p",null,"In addition to confidentiality, you get a few extra benefits including the ability to generate private\nentropy, and make signatures on-chain. An example of a dApp that uses both is a HSM contract\nthat generates an Ethereum wallet and signs transactions sent to it via transactions."),(0,r.kt)("p",null,"Otherwise Sapphire is like Emerald, which is like a fast, cheap Ethereum."),(0,r.kt)("h2",{id:"integrating-sapphire"},"Integrating Sapphire"),(0,r.kt)("p",null,"Once ROSE tokens are ",(0,r.kt)("a",{parentName:"p",href:"/general/manage-tokens/how-to-transfer-rose-into-paratime"},"deposited into Sapphire"),", it should be painless for users to begin\nusing dApps. To achieve this ideal user experience, we have to modify the dApp a little,\nbut it's made simple by our compatibility library, ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@oasisprotocol/sapphire-paratime"},"@oasisprotocol/sapphire-paratime"),"."),(0,r.kt)("p",null,"There are compatibility layers in other languages, which may be found in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/sapphire-paratime/tree/main/clients"},"the repo"),"."),(0,r.kt)("h2",{id:"writing-secure-dapps"},"Writing Secure dApps"),(0,r.kt)("h3",{id:"wallets"},"Wallets"),(0,r.kt)("p",null,"Sapphire is compatible with popular self-custodial wallets including MetaMask,\nLedger, Brave, and so forth. You can also use libraries like Web3.js and Ethers\nto create programmatic wallets. In general, if it generates secp256k1 signatures,\nit'll work just fine."),(0,r.kt)("h3",{id:"languages--frameworks"},"Languages & Frameworks"),(0,r.kt)("p",null,"Sapphire is programmable using any language that targets the EVM, such as Solidity\nand Vyper. If you prefer to use an Ethereum framework like Hardhat or Truffle, you\ncan also use those with Sapphire; all you need to do is set your Web3 gateway URL.\nYou can find the details of the Oasis Sapphire Web3 gateway\n",(0,r.kt)("a",{parentName:"p",href:"/dapp/sapphire#web3-gateway"},"here"),"."),(0,r.kt)("h3",{id:"transactions--calls"},"Transactions & Calls"),(0,r.kt)("p",null,"Transactions and calls must be encrypted and signed for maximum security.\nYou can use the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@oasisprotocol/sapphire-paratime"},"@oasisprotocol/sapphire-paratime")," JS package to make your life\neasy. It'll handle cryptography and signing for you."),(0,r.kt)("p",null,"You should be aware that taking actions based on the value of private data may\nleak the private data through side channels like time spent and gas use. If you\nneed to branch on private data, you should in most cases ensure that both\nbranches exhibit similar time/gas and storage patterns."),(0,r.kt)("p",null,"Another thing to keep in mind is that ",(0,r.kt)("inlineCode",{parentName:"p"},"msg.sender")," will be zeroed for calls that are\nnot signed. If you want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"msg.sender")," for access control, the call must be\nsigned. If you want to avoid signature popups in the user's wallet, just set the\n",(0,r.kt)("inlineCode",{parentName:"p"},"from")," address to all zeros. The JS library will do this for you."),(0,r.kt)("h3",{id:"contract-state"},"Contract State"),(0,r.kt)("p",null,"The Sapphire state model is like Ethereum's except for all state being encrypted\nand not accessible to anyone except the contract. The contract, executing in an\nactive (attested) Oasis compute node is the only entity that can request its\nstate encryption key from the Oasis key manager. Both the keys and values of the\nitems stored in state are encrypted, but the size of either is ",(0,r.kt)("em",{parentName:"p"},"not")," hidden. You\napp may need to pad state items to a constant length, or use other obfuscation.\nObservers may also be able to infer computation based on storage access patterns,\nso you might need to obfuscate that, too."),(0,r.kt)("p",null,"Contract state may be made available to third parties through logs/events, or\nexplicit getters."),(0,r.kt)("h3",{id:"contract-logs"},"Contract Logs"),(0,r.kt)("p",null,"Contract logs/events (e.g., those emitted by the Solidity ",(0,r.kt)("inlineCode",{parentName:"p"},"emit")," keyword)\nare exactly like Ethereum. Data contained in events is ",(0,r.kt)("em",{parentName:"p"},"not")," encrypted.\nPrecompiled contracts are available to help you encrypt data that you can\nthen pack into an event, however."),(0,r.kt)("admonition",{title:"Unmodified contracts may leak state through logs",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Base contracts like those provided by OpenZeppelin often emit logs containing\nprivate information. If you don't know they're doing that, you might undermine\nthe confidentiality of your state. As a concrete example, the ERC-20 spec\nrequires implementers to emit an ",(0,r.kt)("inlineCode",{parentName:"p"},"event Transfer(from, to, amount)"),", which is\nobviously problematic if you're writing a confidential token. What you can\ndo instead is fork that contract and remove the offending emissions.")))}c.isMDXComponent=!0}}]);